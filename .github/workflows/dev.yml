name: "Terraform Dev"

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform Dev"
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Install src dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt --target=.
        working-directory: ./src

      - name: Run tests
        run: pytest
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      - name: Zip src files and place in terraform directory
        run: zip -r terraform/src.zip src

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
          role-duration-seconds: 1200
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Check AWS Credentials
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Set Terraform Workspace
        run: terraform workspace select dev || terraform workspace new dev
        working-directory: ./terraform

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./terraform

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          terraform plan -input=false \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="auth0_domain=${{ secrets.AUTH0_DOMAIN }}" \
          -var="api_audience=${{ secrets.API_AUDIENCE }}"
        working-directory: ./terraform

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="auth0_domain=${{ secrets.AUTH0_DOMAIN }}" \
          -var="api_audience=${{ secrets.API_AUDIENCE }}"
        working-directory: ./terraform
